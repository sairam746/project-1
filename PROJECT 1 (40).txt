PROJECT_1:


import java.util.Scanner;

public class TypeCasting {
	
	public static void main(String[] args) { 

		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the string");	
		String str=sc.next();   
		
		int i=Integer.parseInt(str);
		long l=Long.parseLong(str); 
		float f=Float.parseFloat(str);
		double d=Double.parseDouble(str);  
		char c=str.charAt(0); 
		boolean b=Boolean.parseBoolean(str);
		
		System.out.println("Integer :" +i); 
		System.out.println("Boolean :" +b);
		System.out.println("Double :" +d);
		System.out.println("Long :" +l);
		System.out.println("Char :" +c);
		System.out.println("Float :" +f);
        
        
    }
}


OUTPUT:

Enter the string
252
Integer :252
Boolean : false
Double :252.0
Long : 252
Char : 2
Float : 252.0



PROJECT_2:
 
public class AccessModifiers
{
	private int d=10;
	private void show() {
	System.out.println("it is private method");
	}

	public static void main(String[] args) {
		
	AccessModifiers a=new AccessModifiers();
	a.show(); 
        System.out.println(a.d);
        
        Methods m=new Methods(); 
        m.Public_method();
        System.out.println(m.d1);
        
        default_method d=new default_method();
        d.method1();
        System.out.println(d.d2); 
        
        Protected_method p=new Protected_method();
        p.show1();
                        
	}

}



 class Methods
{
	 public int d1=20;
	 public void Public_method() {
		 System.out.println("it is a public method");
	 }            
}
 
 
 class default_method
 { 
	 int d2=30;
	 void method1() {
		System.out.println("it is a default method becoz we are not using any access modifier"); 
	 }
 }
 
 
 class Protected_method
 {
	 protected void show1() {
		 System.out.println("it is a protected method");
	 }
 }

OUTPUT:

it is private method
20
it is a public method
10
it is a default method becoz we are not using any access modifier
30
it is a protected method


PROJECT_3:


import java.util.Scanner;

public class ArithmeticCalculator {
	
	public static void main(String []args){
	       	    	
	    Scanner  sc = new Scanner(System.in);
     	System.out.println("Enter the first number");
	 		 int a = sc.nextInt();
        System.out.println("Enter the second number");
	 		 int b = sc.nextInt();
	 		  
		  System.out.println("Addition : " +(a+b) );
		  System.out.println("Subration : " +(a-b));
		  System.out.println("Multiplication : "+(a*b));
		  System.out.println("Division : " +(a/b));
		  System.out.println("Modulation : " +(a%b));
	 		  	 		 
     }
}



OUTPUT:

Enter the first number
28
Enter the second number
12
Addition : 40
Subration : 16
Multiplication : 336
Division : 2
Modulation : 4


PROJECT_4:


import java.util.Scanner;

public class DiffReturnTypesMethods {
	
	public static void main(String ar[])   
    {  
       DiffReturnTypesMethods obj = new DiffReturnTypesMethods();  
        int result = obj.CompareNum();  
        System.out.println("The greater number among a and b is: " + result);  
    }  
	public int CompareNum()   
    {   
    	Scanner sc = new Scanner(System.in);

    	System.out.println("Enter a value");
    	int a = sc.nextInt();
    	System.out.println("Enter b value");    	
        int b = sc.nextInt();  
        
        System.out.println("a = " + a + "\nb = " + b);  
        if(a>b)  
            return a;  
        else  
            return b;  
    }   
    
}


OUTPUT:

Enter a value
20
Enter b value
30
a = 20
b = 30
The greater number among a and b is: 30


PROJECT_5:



public class Constructors {

   public static void main(String[] args) {
				
			System.out.println("start");//default constructor
			Bicycle B=new Bicycle();
			System.out.println("end");	
					
			System.out.println("\nstart");//non-parameterized user-defined constructor 
			Car c=new Car();
			System.out.println("end");	
			
			System.out.println("\nstart");//parametrized user-defined cnstructor
	        Bike b=new Bike("suzuki");
			System.out.println("end");
			
			System.out.println("start");// constructorOverloading	
			ConstructorOverloading x=new ConstructorOverloading(4);
			ConstructorOverloading y=new ConstructorOverloading(5,5);
			ConstructorOverloading z=new ConstructorOverloading(2.1f);
			x.display();
			y.display();
			z.display();
	        System.out.println("end");			

		}
	}
		
class Bicycle{
			
			//default constructor
		}


class Car {
		      
			  Car()
		      {
		 		 System.out.println("Non-parameterized user-defined Constructor");
		    	 System.out.println("In Car class Constructor");
			 }
		  }
 class Bike{
			  
			Bike(String brand)
			{
				 System.out.println("parameterized user-defined Constructor");
		    	 System.out.println("Brand:"+brand);

			}
		 }
			
class ConstructorOverloading{
			  int s,h,b;
			  float r;
			 ConstructorOverloading(int s)
			{
		      this.s=s;
			}
			 ConstructorOverloading(int h , int b)
			{
		          this.h=h;
		          this.b=b;	 
			}
			 ConstructorOverloading (float r)
			{
		          this.r=r;

			}
			 void display() {
			System.out.println("\nsqaure of a number:"+(s*s));

			System.out.println("Area of rectangle:"+(h*b));

			System.out.println("Area of circle:"+(3.14*r*r));
		    }
			
		 }	
		    


OUTPUT:

start
end

start
Non-parameterized user-defined Constructor
In Car class Constructor
end

start
parameterized user-defined Constructor
Brand:suzuki
end
start

sqaure of a number:16
Area of rectangle:0
Area of circle:0.0

sqaure of a number:0
Area of rectangle:25
Area of circle:0.0

sqaure of a number:0
Area of rectangle:0
Area of circle:13.84739874229434
end

PROJECT_6:



import java.util.*;

public class Collections {
		
		    public static void main(String[] args) {
		        
		    	
		        System.out.println("ArrayList");
		        ArrayList<String> city=new ArrayList<String>();   
		          city.add("Bidar");//
		          city.add("Gulbarga");           
		          System.out.println(city);  
		        
		        
		          System.out.println("\nVector");
		          Vector<Integer> vec = new Vector();
		          vec.addElement(20); 
		          vec.addElement(20); 
		          System.out.println(vec);
		        
		       
		          System.out.println("\nLinkedList");
		          LinkedList<String> names=new LinkedList<String>();  
		          names.add("pooja");  
		          names.add("madhu");            
		          Iterator<String> itr=names.iterator();  
		          while(itr.hasNext()){  
		           System.out.println(itr.next());  
		           
		          
		           System.out.println("\nHashSet");
		           HashSet<Integer> set=new HashSet<Integer>();  
		           set.add(11);  
		           set.add(13);  
		           set.add(12);
		           set.add(14);
		           System.out.println(set);
		           
		          
		           System.out.println("\n");
		           System.out.println("LinkedHashSet");
		           LinkedHashSet<Integer> set2=new LinkedHashSet<Integer>();  
		           set2.add(1);  
		           set2.add(2);  
		           set2.add(3);
		           set2.add(4);           
		           System.out.println(set2);
		              } 
		          }  
		    }

OUTPUT:

ArrayList
[Bidar, Gulbarga]

Vector
[20, 20]

LinkedList
pooja

HashSet
[11, 12, 13, 14]


LinkedHashSet
[1, 2, 3, 4]
madhu

HashSet
[11, 12, 13, 14]


LinkedHashSet
[1, 2, 3, 4]


PROJECT_7

import java.util.*;

public class MapsUses {

		    public static void main(String[] args) {
			        
			         HashMap<Integer,String> hm=new HashMap<Integer,String>();      
			          hm.put(1,"India");    
			          hm.put(2,"Pakistan");    
			          hm.put(3,"Chaina");   
			           
			          System.out.println("\nThe elements of Hashmap are ");  
			          for(Map.Entry m:hm.entrySet()){    
			           System.out.println(m.getKey()+" "+m.getValue());    
			          }
			              
			          Hashtable<Integer,String> ht=new Hashtable<Integer,String>();  
			          ht.put(4,"North");  
			          ht.put(5,"South");  
			          ht.put(6,"East");  
			          ht.put(7,"West");  

			          System.out.println("\nThe elements of HashTable are ");  
			          for(Map.Entry n:ht.entrySet()){    
			           System.out.println(n.getKey()+" "+n.getValue());    
			          }
			          
			          TreeMap<Integer,String> map=new TreeMap<Integer,String>();    
			          map.put(8,"US");    
			          map.put(9,"UK");    
			          map.put(10,"UP");       
			          
			          System.out.println("\nThe elements of TreeMap are ");  
			          for(Map.Entry l:map.entrySet()){    
			           System.out.println(l.getKey()+" "+l.getValue());    
			          }    
			          
		 }  

}

OUTPUT:

The elements of Hashmap are 
1 India
2 Pakistan
3 Chaina

The elements of HashTable are 
7 West
6 East
5 South
4 North

The elements of TreeMap are 
8 US
9 UK
10 UP


PROJECT_8:



public class InnerClasses {

	public static void main(String[] args) {
		new Inner().in();
	}

}
	 class Inner{
		 
		 int val;
		 void in()
		 {
			 int val = 98;
			 System.out.println("Inside Inner class....");
			 System.out.println("accessing local val:"+val);
			 System.out.println("accessing Inner's instance val: " +this.val);
			 
		 }
	
	 
	 void met(){
		 Inner ref = new Inner();
		 ref.in();


	}

}

OUTPUT:

Inside Inner class....
accessing local val:98
accessing Inner's instance val: 0

PROJECT_9:



public class StringBufferAndBuilder {
	
	public static void main(String[] args) {
    	
        System.out.println("Creating StringBuffer");
		String a = "SULTHANA";
		StringBuffer buf = new StringBuffer(a);
		buf.append("_STUDENT");
		String result = buf.toString();
		System.out.println("String to Str.Buffer: "+result);

      
        //StringBuilder
        System.out.println("\nCreating StringBuilder");
        StringBuilder sb1=new StringBuilder("Happy");
        sb1.append("Learning");
        System.out.println(sb1);

        System.out.println(sb1.delete(0, 1));

        System.out.println(sb1.insert(1, "Welcome"));

        System.out.println(sb1.reverse());
        
          
        //conversion    
        System.out.println("\n");
        System.out.println("Conversion of Strings to StringBuffer and StringBuilder");
        
        String str = "Hello"; 
        
        // conversion from String object to StringBuffer 
        StringBuffer sbr = new StringBuffer(str); 
        sbr.reverse(); 
        System.out.println("String to StringBuffer");
        System.out.println(sbr); 
          
        // conversion from String object to StringBuilder 
        StringBuilder sbl = new StringBuilder(str); 
        sbl.append("world"); 
        System.out.println("String to StringBuilder");
        System.out.println(sbl);                      
    }
}


OUTPUT:

Creating StringBuffer
String to Str.Buffer: SULTHANA_STUDENT

Creating StringBuilder
HappyLearning
appyLearning
aWelcomeppyLearning
gninraeLyppemocleWa


Conversion of Strings to StringBuffer and StringBuilder
String to StringBuffer
olleH
String to StringBuilder
Helloworld

PROJECT_10:

public class ArraysDimensions {

	public static void main(String[] args) {
		               //single-dimensional array
				int A[]= {1,2,3,4,5};
				for(int i=0;i<5;i++) {
				System.out.println("Elements of array A: "+A[i]);
				}


				//multidimensional array
				int[][] B = { {2,4,6,6,8}, {4,8,12} };
				      
			        System.out.println("\nLength of row 1: " + B[0].length);

	}

}


OUTPUT:

Elements of array A: 1
Elements of array A: 2
Elements of array A: 3
Elements of array A: 4
Elements of array A: 5

Length of row 1: 5

PROJECT_11:


import java.util.regex.*;
public class StringsUsingRegularExp {

	public static void main(String[] args) {

	    String pattern = "[a-z,A-Z]+";
	    
            String check = "Regular Expressions Using String Example";

	    Pattern a = Pattern.compile(pattern);
	    Matcher b = a.matcher(check);
	    
	    while (b.find())
	          System.out.println( check.substring( b.start(), b.end() ) );
	}
	
}



OUTPUT:

Regular
Expressions
Using
String
Example


PROJECT_12:


import java.util.*;
public class StringFromArrayOfStrings {

	public static void main(String[] args) {

				String[] str= {"chocolate","icecream","cake"};
				boolean found=false;
				int index=0;
				Scanner s=new Scanner(System.in);
				System.out.println("Enter the string");
				String a=s.nextLine();
				
				for(int i=0;i<str.length;i++)
				{
					if(a.equals(str[i]))
					{
						index=i;
						found=true;
						break;
					}
				}
				if(found)
                    System.out.println(a+" found at the index "+index);
				
				else
					System.out.println(a+" not found in the array");
				
	}
}


OUTPUT:

Enter the string
icecream
icecream found at the index 1

PROJECT_12

public class MyThreads extends Thread{

		 	public void run()
		 	{
		  		System.out.println("concurrent thread started running..");
		}
		
		 	public static void main( String args[] )
		 	{
		  		MyThreads mt = new  MyThreads();
		  		mt.start();
		 	}

}

OUTPUT:
concurrent thread started running..


public class MyRunnableThread implements Runnable{
	public static int myCount = 0;
    public MyRunnableThread(){
         
    }
    public void run() {
        while(MyRunnableThread.myCount <= 10){
            try{
                System.out.println("Expl Thread: "+(++MyRunnableThread.myCount));
                Thread.sleep(100);
            } catch (InterruptedException iex) {
                System.out.println("Exception in thread: "+iex.getMessage());
            }
        }
    } 
    public static void main(String a[]){
        System.out.println("Starting Main Thread...");
        MyRunnableThread mrt = new MyRunnableThread();
        Thread t = new Thread(mrt);
        t.start();
        while(MyRunnableThread.myCount <= 10){
            try{
                System.out.println("Main Thread: "+(++MyRunnableThread.myCount));
                Thread.sleep(100);
            } catch (InterruptedException iex){
                System.out.println("Exception in main thread: "+iex.getMessage());
            }
        }
        System.out.println("End of Main Thread...");
    }
}


Output:

Starting Main Thread...
Main Thread: 1
Expl Thread: 2
Expl Thread: 3
Main Thread: 4
Main Thread: 5
Expl Thread: 5
Main Thread: 6
Expl Thread: 7
Main Thread: 8
Expl Thread: 8
Main Thread: 9
Expl Thread: 10
Main Thread: 11
End of Main Thread...


PROJECT_13:


public class MyClass 
{
    private static Object LOCK = new Object();
    public static void main(String args[]) throws InterruptedException
    {
        Thread.sleep(1000);
        System.out.println("Thread '" + Thread.currentThread().getName() + "' is woken after sleeping for 1 second");
        synchronized (LOCK) 
        {
            LOCK.wait(1000);
            System.out.println("Object '" + LOCK + "' is woken after" + " waiting for 1 second");
        }
    }
}
Output:
 
Thread 'main' is woken after sleeping for 1 second
Object 'java.lang.Object@3fee733d' is woken after waiting for 1 second


PROJECT_14:

import java.io.*; 
import java.util.*; 
class Sender 
{ 
    public void send(String msg) 
    { 
        System.out.println("Sending\t"  + msg ); 
        try
        { 
            Thread.sleep(1000); 
        } 
        catch (Exception e) 
        { 
            System.out.println("Thread  interrupted."); 
        } 
        System.out.println("\n" + msg + "Sent"); 
    } 
} 
class ThreadedSend extends Thread 
{ 
    private String msg; 
    private Thread t; 
    Sender  sender; 
    ThreadedSend(String m,  Sender obj) 
    { 
        msg = m; 
        sender = obj; 
    } 
  
    public void run() 
    {  
        synchronized(sender) 
        { 
            sender.send(msg); 
        } 
    } 
} 
public class SyncDemo 
{ 
    public static void main(String args[]) 
    { 
        Sender snd = new Sender(); 
        ThreadedSend S1 = 
            new ThreadedSend( " Hi " , snd ); 
        ThreadedSend S2 = 
            new ThreadedSend( " Bye " , snd ); 
        S1.start(); 
        S2.start(); 
        try
        { 
            S1.join(); 
            S2.join(); 
        } 
        catch(Exception e) 
        { 
            System.out.println("Interrupted"); 
        } 
    } 
} 


OUTPUT:

Sending	 Hi 

 Hi Sent
Sending	 Bye 

 Bye Sent

PROJECT_15:


public class TryCatch {
    public static void main(String args[]) 
    {
        int[] array = new int[3];
        try 
        {
            array[7] = 3;
        }
        catch (ArrayIndexOutOfBoundsException e) 
        {
            System.out.println("Array index is out of bounds!"); 
        }
        finally 
        {
            System.out.println("The array is of size " + array.length);
        }
    }

}

OUTPUT:
Array index is out of bounds!
The array is of size 3

PROJECT_16:

*THROW_DEMO


public class ThrowDemo {
    public static void main(String[] args)
    {

        int a=45,b=0,rs;

        try
        {
            if(b==0)        
                throw(new ArithmeticException("Can't divide by zero."));
            else
            {
                rs = a / b;
                System.out.print("\n\tThe result is : " + rs);
            }
        }
        catch(ArithmeticException Ex)
        {
            System.out.print("\n\tError : " + Ex.getMessage());
        }

        System.out.print("\n\tEnd of program.");
    }

}
OUTPUT:

	Error : Can't divide by zero.
	End of program.

THROWS_DEMO:


public class ThrowsDemo {
	void Division() throws ArithmeticException
    {
        int a=45,b=0,rs;
         rs = a / b;
        System.out.print("\n\tThe result is : " + rs);
    }
     public static void main(String[] args)
    {
ThrowsDemo T = new ThrowsDemo();
         try
        {
            T.Division();
        }
        catch(ArithmeticException Ex)
        {
            System.out.print("\n\tError : " + Ex.getMessage());
        }
        System.out.print("\n\tEnd of program.");
    }

}

OUTPUT:

	Error : / by zero
	End of program.

FINIALLY_BLOCK_DEMO


public class FiniallyBlockDemo {
    public static void main(String[] args)
    {
        int a=45,b=0,rs=0;
        try
        {
            rs = a / b;
        }
        catch(ArithmeticException Ex)
        {
            System.out.print("\n\tError : " + Ex.getMessage());
        }
        finally
        {
            System.out.print("\n\tThe result is : " + rs);
        }
    }

}

OUTPUT:
	Error : / by zero
	The result is : 0

CUSTOM_DEMO:

class MyException extends Exception 
{ 
    public MyException(String s) 
    { 
        super(s); 
    } 
} 

public class CustomExpDemo {
    public static void main(String args[]) 
    { 
        try
        { 
            throw new MyException("temp"); 
        } 
        catch (MyException ex) 
        { 
            System.out.println("Caught"); 
            System.out.println(ex.getMessage()); 
        } 
    } 

}

OUTPUT:

Caught
temp

PROJECT_17:

class MyException extends Exception{
	   String str1;
	   MyException(String str2) {
		str1=str2;
	   }
	   public String toString(){ 
		return ("MyException Occurred: "+str1) ;
	   }
	}
public class ExpHandling {
	public static void main(String args[]){
		try{
			System.out.println("Starting of try block");
			// I'm throwing the custom exception using throw
			throw new MyException("This is My error Message");
		}
		catch(MyException exp){
			System.out.println("Catch Block") ;
			System.out.println(exp) ;
		}
	   }
}

OUTPUT:


PROJECT_18:
package projects;

public class MyClass 
{
    public static void main(String args[]) 
    {
        int[] array = new int[3];
        try 
        {
            array[7] = 3;
        }
        catch (ArrayIndexOutOfBoundsException e) 
        {
            System.out.println("Array index is out of bounds!"); 
        }
        finally 
        {
            System.out.println("The array is of size " + array.length);
        }
    }
}
:READ:
public class MyClass 
{
    public static void main(String args[]) 
    {
        int[] array = new int[3];
        try 
        {
            array[7] = 3;
        }
        catch (ArrayIndexOutOfBoundsException e) 
        {
            System.out.println("Array index is out of bounds!"); 
        }
        finally 
        {
            System.out.println("The array is of size " + array.length);
        }
    }
}
:UPDATE:
public class MyClass 
{
    public static void main(String args[]) 
    {
        int[] array = new int[3];
        try 
        {
            array[7] = 3;
        }
        catch (ArrayIndexOutOfBoundsException e) 
        {
            System.out.println("Array index is out of bounds!"); 
        }
        finally 
        {
            System.out.println("The array is of size " + array.length);
        }
    }
}
:DELETE:
public class MyClass 
{
    public static void main(String args[]) 
    {
        int[] array = new int[3];
        try 
        {
            array[7] = 3;
        }
        catch (ArrayIndexOutOfBoundsException e) 
        {
            System.out.println("Array index is out of bounds!"); 
        }
        finally 
        {
            System.out.println("The array is of size " + array.length);
        }
    }
}


OUTPUT:
Array index is out of bounds!
The array is of size 3

PROJECT_19:

public class MyClass 
{
    public static void main(String args[]) 
    {
        int[] array = new int[3];
        try 
        {
            array[7] = 3;
        }
        catch (ArrayIndexOutOfBoundsException e) 
        {
            System.out.println("Array index is out of bounds!"); 
        }
        finally 
        {
            System.out.println("The array is of size " + array.length);
        }
    }
}
:POLYMORPHISM:
public class MyClass 
{
    public static void main(String args[]) 
    {
        int[] array = new int[3];
        try 
        {
            array[7] = 3;
        }
        catch (ArrayIndexOutOfBoundsException e) 
        {
            System.out.println("Array index is out of bounds!"); 
        }
        finally 
        {
            System.out.println("The array is of size " + array.length);
        }
    }
}
:INHERITANCE:
public class MyClass 
{
    public static void main(String args[]) 
    {
        int[] array = new int[3];
        try 
        {
            array[7] = 3;
        }
        catch (ArrayIndexOutOfBoundsException e) 
        {
            System.out.println("Array index is out of bounds!"); 
        }
        finally 
        {
            System.out.println("The array is of size " + array.length);
        }
    }
}
:ENCAPSULATION:
public class MyClass 
{
    public static void main(String args[]) 
    {
        int[] array = new int[3];
        try 
        {
            array[7] = 3;
        }
        catch (ArrayIndexOutOfBoundsException e) 
        {
            System.out.println("Array index is out of bounds!"); 
        }
        finally 
        {
            System.out.println("The array is of size " + array.length);
        }
    }
}
:ABSTRACTION:
public class MyClass 
{
    public static void main(String args[]) 
    {
        int[] array = new int[3];
        try 
        {
            array[7] = 3;
        }
        catch (ArrayIndexOutOfBoundsException e) 
        {
            System.out.println("Array index is out of bounds!"); 
        }
        finally 
        {
            System.out.println("The array is of size " + array.length);
        }
    }
}


OUTPUT:

Array index is out of bounds!
The array is of size 3



PROJECT_20:

package projects;

public class Diamond 
{
    public static void main(String args[]) 
    {
        int[] array = new int[3];
        try 
        {
            array[7] = 3;
        }
        catch (ArrayIndexOutOfBoundsException e) 
        {
            System.out.println("Array index is out of bounds!"); 
        }
        finally 
        {
            System.out.println("The array is of size " + array.length);
        }
    }
}
OUTPUT:
Array index is out of bounds!
The array is of size 3

PROJECT_21:

SUBMITTED IN SIMPLILEARN

PROJECT_22:

class RotateArray
{
		public void rotate(int[] nums, int k) {
		    		if(k > nums.length) 
		       			k=k%nums.length;
		 		int[] result = new int[nums.length];
		 		for(int i=0; i < k; i++){
		        			result[i] = nums[nums.length-k+i];
		 		}
		 		int j=0;
		    		for(int i=k; i<nums.length; i++){
		        			result[i] = nums[j];
		j++;
		    		}
		 		System.arraycopy( result, 0, nums, 0, nums.length );
		}
		} 
public class ArrayRoation {
	public static void main(String[] args) {
		RotateArray r = new RotateArray();
        		int arr[] = { 1, 2, 3, 4, 5, 6, 7 }; 
        		r.rotate(arr, 5); 
        		for(int i=0;i<arr.length;i++){
            			System.out.print(arr[i]+" ");
        		}
	}
}

OUTPUT:

3 4 5 6 7 1 2 

PROJECT_23:

class KthSmallst 
{ 
int kthSmallest(int arr[], int l, int r, int k) 
    	{ 
             		if (k > 0 && k <= r - l + 1) 
        		{ 
            			int pos = randomPartition(arr, l, r); 
            			if (pos-l == k-1) 
                			return arr[pos]; 
            			if (pos-l > k-1) 
                			return kthSmallest(arr, l, pos-1, k); 
            			return kthSmallest(arr, pos+1, r, k-pos+l-1); 
        		} 
        return Integer.MAX_VALUE; 
    } 
    void swap(int arr[], int i, int j) 
    { 
        int temp = arr[i]; 
        arr[i] = arr[j]; 
        arr[j] = temp; 
    } 
    int partition(int arr[], int l, int r) 
    { 
        int x = arr[r], i = l; 
        for (int j = l; j <= r - 1; j++) 
        { 
            if (arr[j] <= x) 
            { 
                swap(arr, i, j); 
                i++; 
            } 
        } 
        swap(arr, i, r); 
        return i; 
    } 
    int randomPartition(int arr[], int l, int r) 
    { 
        int n = r-l+1; 
        int pivot = (int)(Math.random()) * (n-1); 
        swap(arr, l + pivot, r); 
        return partition(arr, l, r); 
    } 
}  
public class OrderStatistics {
	public static void main(String[] args) {
		KthSmallst ob = new KthSmallst(); 
        int arr[] = {12, 3, 5, 7, 4, 19, 26}; 
        int n = arr.length,k = 6; 
        System.out.println("K'th smallest element is "+ ob.kthSmallest(arr, 0, n-1, k)); 
    }
}

OUTPUT:

K'th smallest element is 19

PROJECT_24:

public class RangeQueries {
	static int k = 16;
    static int N = 100000; 
    static long table[][] = new long[N][k + 1]; 
    static void buildSparseTable(int arr[], int n) 
    { 
        for (int i = 0; i < n; i++) 
            table[i][0] = arr[i]; 
        for (int j = 1; j <= k; j++) 
            for (int i = 0; i <= n - (1 << j); i++) 
                table[i][j] = table[i][j - 1] + table[i + (1 << (j - 1))][j - 1]; 
    } 
    static long query(int L, int R) 
    {
        long answer = 0; 
        for (int j = k; j >= 0; j--)  
        { 
            if (L + (1 << j) - 1 <= R)  
            { 
                answer = answer + table[L][j];
                L += 1 << j; 
            } 
        } 
        return answer; 
    }
    public static void main(String args[]) 
    { 
        int arr[] = { 3, 7, 2, 5, 8, 9 }; 
        int n = arr.length; 
        buildSparseTable(arr, n); 
        System.out.println(query(0, 5)); 
        System.out.println(query(3, 5)); 
        System.out.println(query(2, 4)); 
    } 
}

OUTPUT:
34
22
15

PROJECT_25:


public class Matrix { //multiplication
	public static void main(String[] args) 
	{
		int r1 = 2, c1 = 3;
		int r2 = 3, c2 = 2;
	        		int[][] firstMatrix = { {3, -2, 5}, {3, 0, 4} };
	        		int[][] secondMatrix = { {2, 3}, {-9, 0}, {0, 4} };
	int[][] product = multiplyMatrices(firstMatrix, secondMatrix, r1, c1, c2);
	displayProduct(product);
	    	}

	public static int[][] multiplyMatrices(int[][] firstMatrix, int[][] secondMatrix, int r1, int c1, int c2) 
	{
	        		int[][] product = new int[r1][c2];
	        		for(int i = 0; i < r1; i++) 
	{
	            			for (int j = 0; j < c2; j++) 
	{
	                			for (int k = 0; k < c1; k++) 
	{
	                    				product[i][j] += firstMatrix[i][k] * secondMatrix[k][j];
	                			}
	            			}
	       	 	}
	return product;
	    	}
	public static void displayProduct(int[][] product) 
	{
	        		System.out.println("Multiplication or the product of two matrices is: ");
	        		for(int[] row : product) 
	{
	            			for (int column : row) 
	{
	                			System.out.print(column + "    ");
	            			}
	            			System.out.println();
	        		}
	    	}
}


OUTPUT:
Multiplication or the product of two matrices is: 
24    29    
6    25    

PROJECT_26

import java.io.*; 
public class SinglyLinkedList {



	Node head; // head of list 
	    	static class Node 
	{ 
	        		int data; 
	        		Node next; 
	        		Node(int d) 
	        		{ 
	            			data = d; 
	            			next = null; 
	        		} 
	    	} 
	// Method to insert a new node 
	    	public static SinglyLinkedList insert(SinglyLinkedList list, int data) 
	    	{ 
	        		// Create a new node with given data 
	        		Node new_node = new Node(data); 
	        		new_node.next = null; 
	   		// If the Linked List is empty, then make the new node as head 
	        		if (list.head == null) 
	{ 
	            			list.head = new_node; 
	        		} 
	        		else 
	{ 
	            			// Else traverse till the last node and insert the new_node there 
	            			Node last = list.head; 
	            			while (last.next != null) 
	{ 
	                			last = last.next; 
	            			} 
	   			// Insert the new_node at last node 
	            			last.next = new_node; 
	        		} 
	        		return list; 
	    	} 
	   	public static void printList(SinglyLinkedList list) 
	    	{	 
	        		Node currNode = list.head; 
	        		System.out.print("LinkedList: "); 
	        		// Traverse through the LinkedList 
	        		while (currNode != null) 
	{ 
	            			// Print the data at current node 
	            			System.out.print(currNode.data + " "); 
	            			// Go to next node 
	            			currNode = currNode.next; 
	        		} 
	        		System.out.println(); 
	    	} 
	    	// Method to delete a node in the LinkedList by KEY 
	    	public static SinglyLinkedList deleteByKey(SinglyLinkedList list, int key) 
	    	{ 
	        		// Store head node 
	        		Node currNode = list.head, prev = null; 
	        		if (currNode != null && currNode.data == key)
	{ 
	            			list.head = currNode.next; // Changed head 
	            			System.out.println(key + " found and deleted"); 
	            			return list; 
	        		} 
	        		while (currNode != null && currNode.data != key) 
	{ 
	            			prev = currNode; 
	            			currNode = currNode.next; 
	        		} 
	        		if (currNode != null) 
	{ 
	            			prev.next = currNode.next; 
	            			System.out.println(key + " found and deleted"); 
	        		} 
	        		if (currNode == null) 
	{ 
	            			System.out.println(key + " not found"); 
	        		} 
	        		return list; 
	    	} 
	    	// method to create a Singly linked list with n nodes 
	    	public static void main(String[] args) 
	    	{ 
	        		/* Start with the empty list. */
	    		SinglyLinkedList list = new SinglyLinkedList(); 
	        		// Insert the values 
	        		list = insert(list, 1); 
	        		list = insert(list, 2); 
	        		list = insert(list, 3); 
	        		list = insert(list, 4); 
	        		list = insert(list, 5); 
	        		list = insert(list, 6); 
	        		list = insert(list, 7); 
	        		list = insert(list, 8); 
	        		// Print the LinkedList 
	        		printList(list); 
	        		// Delete node with value 1 
	        		deleteByKey(list, 1); 
	        		// Print the LinkedList 
	        		printList(list); 
	        		// Delete node with value 4 
	        		deleteByKey(list, 4); 
	        		// Print the LinkedList 
	        		printList(list); 
	        		// Delete node with value 10 
	       		deleteByKey(list, 10); 
	        		// Print the LinkedList 
	        		printList(list); 
	    	} 
	} 

OUTPUT:
LinkedList: 1 2 3 4 5 6 7 8 
1 found and deleted
LinkedList: 2 3 4 5 6 7 8 
4 found and deleted
LinkedList: 2 3 5 6 7 8 
10 not found
LinkedList: 2 3 5 6 7 8 

PROJECT_27:


public class CircularLinkedList {

		    	static class Node 
		    	{ 
		  		int data; 
		        		Node next; 
		                	Node(int d) 
		        		{ 
		            			data = d; 
		            			next = null; 
		        		} 
		}
		Node head; 
		CircularLinkedList()   
		{ 
		head = null; 
		} 
		    	void sortedInsert(Node new_node) 
		    	{ 
		        		Node current = head; 
		if (current == null) 
		        		{ 
		            			new_node.next = new_node; 
		            			head = new_node; 
		  		} 
		else if (current.data >= new_node.data) 
		        		{ 
		while (current.next != head) 
		                			current = current.next; 
		  		 	current.next = new_node; 
		            			new_node.next = head; 
		            			head = new_node; 
		        		} 
		        		else
		        		{
		while (current.next != head && current.next.data < new_node.data) 
		                			current = current.next; 
		  			new_node.next = current.next; 
		            			current.next = new_node; 
		        		} 
			}
		void printList() 
		    	{ 
		        		if (head != null) 
		       		{ 
		            			Node temp = head; 
		            			do
		           			{ 
		                			System.out.print(temp.data + " "); 
		                			temp = temp.next; 
		            			}  while (temp != head); 
		        		} 
		    	}
		public static void main(String[] args) 
		    	{ 
		        		CircularLinkedList list = new CircularLinkedList(); 
		        		int arr[] = new int[] {17, 45, 2, 10, 1, 90}; 
		        		Node temp = null; 
		        		for (int i = 0; i < 6; i++) 
		        		{ 
		           			temp = new Node(arr[i]); 
		            			list.sortedInsert(temp); 
		        		} 
		list.printList(); 
		    	}		 
		}


OUTPUT:
1 2 10 17 45 90 

PROJECT_28:

public class DoublyLinkedList {
	
    	Node head; 
        class Node{ 
        		int data; 
        		Node prev; 
        		Node next; 
         Node(int d){ 
                 data = d; 
               } 
}
public void push(int new_data) 
    	{ 
Node new_Node = new Node(new_data); 
new_Node.next = head; 
        		new_Node.prev = null; 
if (head != null) 
            			head.prev = new_Node; 
head = new_Node; 
    	} 
public void InsertAfter(Node prev_Node, int new_data) 
    	{ 
if (prev_Node == null) 
{ 
            			System.out.println("The given previous node cannot be NULL "); 
            			return; 
        		} 	
Node new_node = new Node(new_data); 
new_node.next = prev_Node.next; 
prev_Node.next = new_node; 
new_node.prev = prev_Node; 
if (new_node.next != null) 
            			new_node.next.prev = new_node; 
    	} 
    	void append(int new_data) 
    	{ 
Node new_node = new Node(new_data); 
  		Node last = head; 
new_node.next = null;
if (head == null) 
{ 
            			new_node.prev = null; 
            			head = new_node; 
            			return; 
        		} 
while (last.next != null) 
            			last = last.next; 
last.next = new_node; 
new_node.prev = last; 
    	} 
public void printlist(Node node) 
    	{ 
        		Node last = null; 
        		System.out.println("Traversal in forward Direction"); 
        		while (node != null) 
{ 
            			System.out.print(node.data + " "); 
            			last = node; 
            			node = node.next; 
        		} 
        		System.out.println(); 
        		System.out.println("Traversal in reverse direction"); 
        		while (last != null) 
{ 
            			System.out.print(last.data + " "); 
            			last = last.prev; 
        		} 
    	}
public static void main(String[] args) 
    	{
DoublyLinkedList dll = new DoublyLinkedList();
dll.append(6); 
dll.push(7);
dll.push(1); 
dll.append(4); 
dll.InsertAfter(dll.head.next, 8); 
  		System.out.println("Created Doubly Linked List is: "); 
        		dll.printlist(dll.head); 
    	} 
}

OUTPUT:

Created Doubly Linked List is: 
Traversal in forward Direction
1 7 8 6 4 
Traversal in reverse direction
4 6 8 7 1 

PROJECT_29:



public class StackOperations {
	static final int MAX = 1000; 
	int top; 
	int a[] = new int[MAX];  
	boolean isEmpty() 
	{ 
    		return (top < 0); 
	} 
	StackOperations() 
	{ 
    		top = -1; 
	} 
	boolean push(int x) 
	{ 
    		if (top >= (MAX-1)) 
    		{ 
        			System.out.println("Stack Overflow"); 
        			return false; 
    		} 
    		else
    		{ 
        			a[++top] = x; 
        			System.out.println(x + " pushed into stack"); 
        			return true; 
    		} 
	} 
int pop() 
	{ 
    		if (top < 0) 
    		{ 
        			System.out.println("Stack Underflow"); 
        			return 0; 
    		} 
    		else
    		{ 
        			int x = a[top--]; 
        			return x; 
    		} 
	} 

	public static void main(String args[])
{
    		StackOperations s = new StackOperations(); 
    		s.push(17); 
    		s.push(28); 
    		s.push(39); 
    		System.out.println(s.pop() + " Popped from stack"); 
	}
}

OUTPUT:
17 pushed into stack
28 pushed into stack
39 pushed into stack
39 Popped from stack

PROJECT_30:



import java.util.*;

public class Queues {
	public static void main(String[] args) 
	{
	        		Queue<String> locationsQueue = new LinkedList<>();
	locationsQueue.add("Laddu");
	        		locationsQueue.add("Kaaju Katli");
	        		locationsQueue.add("Badhusa");
	        		locationsQueue.add("Gulab Jamun");
	        		locationsQueue.add("Rasa Malai");
	System.out.println("Queue is : " + locationsQueue);
	        		System.out.println("Head of Queue : " + locationsQueue.peek());
	        		locationsQueue.remove();
	        		System.out.println("After removing Head of Queue : " + locationsQueue);
	        		System.out.println("Size of Queue : " + locationsQueue.size());
	    	}
}

OUTPUT:

Queue is : [Laddu, Kaaju Katli, Badhusa, Gulab Jamun, Rasa Malai]
Head of Queue : Laddu
After removing Head of Queue : [Kaaju Katli, Badhusa, Gulab Jamun, Rasa Malai]
Size of Queue : 4

PROJECT_31:

SUBMITTED IN SIMPLILEARN

PROJECT_32:



import java.util.Scanner;

public class LinearSearch {
	 public static void main(String[] args){

	        int[] arr = {90,85,45,50,23,22,17};

	        Scanner sc = new Scanner(System.in);
	        System.out.println("Enter the element to be searched");
	        int searchValue = sc.nextInt();
	            int result = (int) linearing(arr,searchValue);

	            if(result==-1){

	                System.out.println("Element not in the array");
	            } else {

	                System.out.println("Element found at "+result+" and the search key is "+arr[result]);
	            }


	        }




	public static int linearing(int arr[], int x) {

	    int arrlength = arr.length;
	    for (int i = 0; i < arrlength - 1; i++) {

	        if (arr[i] == x) {

	            return i;

	         }
	     }

	            return -1;

	   }

}


OUTPUT:

Enter the element to be searched
90
Element found at 0 and the search key is 90


PROJECT_33:



public class BinarySearch {
	public static  void main(String[] args){


        int[] arr = {2,3,4,5,6,7};
        int key = 6;
        int arrlength = arr.length;
        BinarySearch(arr,0,key,arrlength);
    }

public static void BinarySearch(int[] arr, int start, int key, int length){

        int midValue = (start+length)/2;
        while(start<=length){

            if(arr[midValue]<key){

                start = midValue + 1;
            } else if(arr[midValue]==key){
                System.out.println("Element is found at index :"+midValue);
                break;
            }else {

                length=midValue-1;
            }
            midValue = (start+length)/2;
        }
            if(start>length){

                System.out.println("Element is not found");
            }

}

}

OUTPUT:

Element is found at index :4

PROJECT_34:


import java.util.Arrays;

public class ExponentialSearch {
	public static  void main(String[] args){

	    int[] arr = {2,4,8,16,32};
	    int length= arr.length;
	    int value = 16;
	    int outcome = exponentialSearch(arr,length,value);

	    if(outcome<0){

	       System.out.println( "Element is not present in the array");

	    }else {

	        System.out.println( "Element is  present in the array at index :"+outcome);
	    }

	        }

	        public static int exponentialSearch(int[] arr ,int length, int value ){

	        if(arr[0]==value){
	            return 0;
	            }
	        int i=1;
	        while(i<length && arr[i]<=value){

	            i=i*2;
	        }
	        return Arrays.binarySearch(arr,i/2,Math.min(i,length),value);
	        }

}

OUTPUT:

Element is  present in the array at index :3

PROJECT_35:



public class SelectionSort {
	public static void main(String[] args) {

	    int[] arr = {18,7,25,26,29,13,4}; 
	    int length = arr.length;
	    SelectionSort(arr);
	    System.out.println("The sorted elements are:");
	    for(int i:arr){

	        System.out.println(i);
	         }
	     }

	    public static void SelectionSort (int[] arr)
	    {

	        for(int i=0;i<arr.length-1;i++){

	            int index =i;
	            for(int j=i+1;j<arr.length;j++){
	                if(arr[j]<arr[index]){

	                    index =j;
	                }

	            }
	            int smallNumber = arr[index];
	            arr[index]= arr[i];
	            arr[i]= smallNumber;
	        }

	    }
}

OUTPUT:

The sorted elements are:
4
7
13
18
25
26
29

PROJECT_36:



public class BubbleSort {
	public static void main(String[] args){

	     int[] arr= {9,10,4,3,17,77};
	     bubbleSort(arr);
	     for(int i=0;i<arr.length;i++){

	        System.out.println(arr[i]);
	        }
	    }

	    public static void bubbleSort(int[] arr){
	        int len = arr.length;
	        int temp = 0;
	        for(int i=0;i<len;i++){
	            for (int j=1;j<(len);j++){
	                if(arr[j-1]>arr[j]){
	                temp = arr[j-1];
	                arr[j-1]= arr[j];
	                arr[j]= temp;

	                }


	            }

	        }

	    }
}

OUTPUT:

3
4
9
10
17
77

PROJECT_37:



public class InsertionSort {

	public static  void main(String[] args){

        int[] arr = {78,50,40,55,76,2};
        insertionSort(arr);
        for(int i=0;i<arr.length;i++){

            System.out.println(arr[i]);

        }
     }
    public static void insertionSort(int[] arr){

    int len = arr.length;
    for(int j=1;j<len;j++){
    int key = arr[j];
    int i=j-1;
    while ((i>-1) && (arr[i]>key)){

        arr[i+1]=arr[i];
        i--;
    }
    arr[i+1]=key;
         }

    }
}

OUTPUT:

2
40
50
55
76
78

PROJECT_38:



public class MergeSort {
	void merge(int arr[], int l, int m, int r)
    {
        
        int n1 = m - l + 1;
        int n2 = r - m;

        /* Create temp arrays */
        int L[] = new int [n1];
        int R[] = new int [n2];

        /*Copy data to temp arrays*/
        for (int i=0; i<n1; ++i)
            L[i] = arr[l + i];
        for (int j=0; j<n2; ++j)
            R[j] = arr[m + 1+ j];



        int i = 0, j = 0;

                int k = l;
        while (i < n1 && j < n2)
        {
            if (L[i] <= R[j])
            {
                arr[k] = L[i];
                i++;
            }
            else
            {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        while (i < n1)
        {
            arr[k] = L[i];
            i++;
            k++;
        }

        
        while (j < n2)
        {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
    void sort(int arr[], int l, int r)
    {
        if (l < r)
        {
            
            int m = (l+r)/2;

            
            sort(arr, l, m);
            sort(arr , m+1, r);

            
            merge(arr, l, m, r);
        }
    }

        static void printArray(int arr[])
    {
        int n = arr.length;
        for (int i=0; i<n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }

    // Driver method
    public static void main(String args[])
    {
        int arr[] = {18,13,12,90,85,50,39};

        System.out.println("Given Array");
        printArray(arr);

        MergeSort ob = new MergeSort();
        ob.sort(arr, 0, arr.length-1);

        System.out.println("\nSorted array");
        printArray(arr);
    }
}

OUTPUT:

Given Array
18 13 12 90 85 50 39 

Sorted array
12 13 18 39 50 85 90 

PROJECT_39:



public class QuickSort {

		    int partition(int arr[], int low, int high)
		    { 
		        int pivot = arr[high];
		        int i = (low-1); // index of smaller element
		        for (int j=low; j<high; j++)
		        { 
		            if (arr[j] <= pivot)
		            {
		                i++;

		                // swap arr[i] and arr[j]
		                int temp = arr[i];
		                arr[i] = arr[j];
		                arr[j] = temp;
		            }
		        }

		        // swap arr[i+1] and arr[high] (or pivot)
		        int temp = arr[i+1];
		        arr[i+1] = arr[high];
		        arr[high] = temp;

		        return i+1;
		    }



		    void sort(int arr[], int low, int high)
		    {
		        if (low < high)
		        {

		            int pi = partition(arr, low, high);

		            
		            sort(arr, low, pi-1);
		            sort(arr, pi+1, high);
		        }
		    }
		    static void printArray(int arr[])
		    {
		        int n = arr.length;
		        for (int i=0; i<n; ++i)
		            System.out.print(arr[i]+" ");
		        System.out.println();
		    }

		    // Driver program
		    public static void main(String args[])
		    {
		        int arr[] = {25, 04, 07, 18, 13, 2020};
		        int n = arr.length;

		        QuickSort ob = new QuickSort();
		        ob.sort(arr, 0, n-1);

		        System.out.println("The Sorted array is ");
		        printArray(arr);
		    }
		}

OUTPUT:

The Sorted array is 
4 7 13 18 25 2020 

PROJECT_40:

SUBMITTED IN SIMPLILEARN